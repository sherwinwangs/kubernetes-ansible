- name: Create directory for kube-node
  file: name={{ item }} state=directory
  with_items:
    - /var/lib/kubelet
    - /var/lib/kube-proxy
    - /etc/cni/net.d
    - /etc/kubernetes/yaml

- name: Download necessary binary files kubelet, kubectl, cni plugins
  copy: src={{ base_dir }}/bin/kubernetes/{{ item }} dest={{ bin_dir }}/{{ item }} mode=0755
  with_items:
    - kubelet
    - kubectl
    - bridge
    - host-local
    - loopback
    - portmap
    - flannel

- block:
    - name: Login private registry and force re-authorization
      docker_login:
        registry: "{{ groups.nexus[0] }}:{{ NEXUS_DOCKER_REGISTRY_PORT }}"
        username: "admin"
        password: "{{ NEXUS_ADMIN_PASSWORD }}"
        reauthorize: yes
      ignore_errors: true

    - name: Pull all image from configuration
      docker_image:
        name: "{{ groups.nexus[0] }}:{{ NEXUS_DOCKER_REGISTRY_PORT }}/{{ item.target_group }}/{{ item.name }}:{{ item.tag }}"
        source: pull
      with_items: "{{ DOCKER_IMAGE_LIST }}"
      ignore_errors: true

- name: Prepare certificate request file for kubelet
  template: src=kubelet-csr.json.j2 dest={{ ca_dir }}/kubelet-csr.json

- name: Create certificate and private keys for kubelet
  shell: "cd {{ ca_dir }} && {{ bin_dir }}/cfssl gencert \
        -ca={{ ca_dir }}/ca.pem \
        -ca-key={{ ca_dir }}/ca-key.pem \
        -config={{ ca_dir }}/ca-config.json \
        -profile=kubernetes kubelet-csr.json | {{ bin_dir }}/cfssljson -bare kubelet"

- name: Setting cluster parameters
  shell: "{{ bin_dir }}/kubectl config set-cluster kubernetes \
        --certificate-authority={{ ca_dir }}/ca.pem \
        --embed-certs=true \
        --server={{ KUBE_APISERVER }} \
	    --kubeconfig=/etc/kubernetes/kubelet.kubeconfig"

- name: Setting client authentication parameters
  shell: "{{ bin_dir }}/kubectl config set-credentials system:node:{{ inventory_hostname }} \
        --client-certificate={{ ca_dir }}/kubelet.pem \
        --embed-certs=true \
        --client-key={{ ca_dir }}/kubelet-key.pem \
        --kubeconfig=/etc/kubernetes/kubelet.kubeconfig"

- name: Setting context references
  shell: "{{ bin_dir }}/kubectl config set-context default \
        --cluster=kubernetes \
        --user=system:node:{{ inventory_hostname }} \
        --kubeconfig=/etc/kubernetes/kubelet.kubeconfig"

- name: Select the default context
  shell: "{{ bin_dir }}/kubectl config use-context default \
        --kubeconfig=/etc/kubernetes/kubelet.kubeconfig"

- name: Register variable DNS_SVC_IP
  shell: echo {{ SERVICE_CIDR }}|cut -d/ -f1|awk -F. '{print $1"."$2"."$3"."$4+2}'
  register: DNS_SVC_IP
  tags: upgrade_k8s, restart_node

- name: Setting variable CLUSTER_DNS_SVC_IP
  set_fact: CLUSTER_DNS_SVC_IP={{ DNS_SVC_IP.stdout }}
  tags: upgrade_k8s, restart_node


- name: Distribution default cni configuration files
  template: src=cni-default.conf.j2 dest=/etc/cni/net.d/10-default.conf

- name: Create kubelet configuration files
  template: src=kubelet-config.yaml.j2 dest=/var/lib/kubelet/config.yaml
  tags: upgrade_k8s, restart_node

- name: Setting systemd file for kubelet
  template: src=kubelet.service.j2 dest=/etc/systemd/system/kubelet.service
  tags: upgrade_k8s, restart_node

- name: Start kubelete service on boot
  shell: systemctl enable kubelet
  ignore_errors: true

- name: Reload systemd and start kubelet
  shell: systemctl daemon-reload && systemctl restart kubelet
  tags: upgrade_k8s, restart_node

- name: Waiting for kubelet start-up to complete
  shell: "systemctl status kubelet.service|grep Active"
  register: kubelet_status
  until: '"running" in kubelet_status.stdout'
  retries: 8
  delay: 2
  tags: reload-kubelet, upgrade_kubelet, restart_node
